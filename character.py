import random
from random import randint
#from config import DEBUG
class Character():

    def __init__(self, name:str, description:str, current_room, msg:list):
        self.name = name
        self.description = description
        self.current_room = current_room
        self.msg = msg
        self.msg_index = 0  # üåü Indice pour suivre le message affich√©
        
    def __str__(self):
        return str(self.name) + " : " +  str(self.description)
    

    """def move(self):
       
        D√©place le personnage non joueur dans une pi√®ce adjacente avec une probabilit√© de 50% (1 chance sur 2).
        Retourne True si le personnage se d√©place, False sinon.
        """
    """# Chance de 50% de se d√©placer
        if random.choice([True, False]):
            # V√©rifier qu'il y a des sorties disponibles
            if not self.current_room.exits:
                print(f"{self.name} ne peut pas se d√©placer (pas de pi√®ce adjacente).")
                return False
            
            # Choisir une pi√®ce adjacente au hasard
            next_room = random.choice(list(self.current_room.exits.values()))

            # D√©placer le personnage vers la nouvelle pi√®ce
            self.current_room.characters.remove(self)  # Retirer le personnage de la pi√®ce actuelle
            if next_room.characters is None:  # Si la pi√®ce n'a pas de personnages
                next_room.characters = {self}
            else:
                next_room.characters.add(self)  # Ajouter le personnage √† la nouvelle pi√®ce

            # Mettre √† jour la pi√®ce actuelle du personnage
            self.current_room = next_room

            # Afficher un message de d√©bogage si DEBUG est activ√©
            if DEBUG:
                print(f"{self.name} se d√©place vers {next_room.name}.")
            
            return True
        else:
            # Si le personnage reste dans la m√™me pi√®ce
            if DEBUG:
                print(f"{self.name} reste dans la m√™me pi√®ce.")
            return False"""
    """print(f"{self.name} tente de se d√©placer...")
    
        # Afficher la pi√®ce actuelle avant le d√©placement
        print(f"{self.name} est actuellement dans la pi√®ce: {self.current_room.name}")
        if random.choice([True, False]):
            # V√©rifie s'il y a des sorties disponibles
            if not self.current_room.exits:
                print(f"{self.name} ne peut pas se d√©placer (pas de pi√®ces adjacentes).")
                return False
            
            # Choisir une pi√®ce adjacente au hasard
            next_room = random.choice(list(self.current_room.exits.values()))
            
            # D√©placer le personnage dans la nouvelle pi√®ce
            self.current_room.characters.remove(self)  # Retirer le personnage de la pi√®ce actuelle
            if next_room.characters is None:  # Si la nouvelle pi√®ce est vide
                next_room.characters = {self}
            else:
                next_room.characters.add(self)  # Ajouter √† la nouvelle pi√®ce

            # Mettre √† jour la pi√®ce actuelle du personnage
            self.current_room = next_room

            # Afficher les personnages pr√©sents dans la nouvelle pi√®ce apr√®s d√©placement
            print(f"Personnages dans {next_room.name} apr√®s le d√©placement: {[character.name for character in next_room.characters]}")

            #Afficher la nouvelle pi√®ce du personnage
            print(f"{self.name} est maintenant dans la pi√®ce: {self.current_room.name}")
            return True
        else:
            # Si le personnage reste dans la m√™me pi√®ce
            print(f"{self.name} reste dans la m√™me pi√®ce.")
            return False  # Le personnage ne s'est pas d√©plac√©"""

    """
        # V√©rifie s'il y a des sorties dans la pi√®ce actuelle
            if not self.current_room or not self.current_room.exits: # type: ignore
                print(f"{self.name} ne peut pas se d√©placer, aucune sortie disponible.") # type: ignore
            
        
            # Une chance sur deux de se d√©placer (50% de chance)
            if random.choice([True, False]):
                # Choisir une direction au hasard parmi les sorties disponibles
                next_room = random.choice(list(self.current_room.exits.values())) # type: ignore
                print(f"{self.name} se d√©place vers {next_room.name}.") # type: ignore
            
            # Trouver la pi√®ce adjacente √† cette direction
            #next_room = self.current_room.exits[direction]
            
            # D√©placer le personnage dans la nouvelle pi√®ce
            #del self.current_room.character(self.name)
            #self.current_room.characters.remove(self.name)  # Retire le personnage de la pi√®ce actuelle
            #next_room.characters.add(self)  # Ajoute le personnage dans la nouvelle pi√®ce
            

            #self.current_room = next_room  # Met √† jour la pi√®ce actuelle du personnage
            
            #print(f"{self.name} se d√©place vers {next_room.name}.")
            #return True
            # Retirer de la pi√®ce actuelle (utilise le nom comme cl√©)
                print(self.current_room.characters)
                self.current_room.characters.pop(self.name.lower())
                print(self.current_room.characters)
            
                # Mettre √† jour la pi√®ce actuelle
                self.current_room = next_room
            
                # Ajouter le personnage √† la nouvelle pi√®ce
                next_room.characters[self.name.lower()] = self
            """
            
            
        
    """else:
        # Le personnage reste dans la pi√®ce actuelle
        print(f"{self.name} reste dans la pi√®ce {self.current_room.name}.")
        return False"""



    def get_msg(self): #üåü
        """
        Affiche cycliquement les messages associ√©s au personnage.

        Lorsqu'un message est affich√©, il ne sera plus affich√© dans les appels suivants,
        mais les messages sont r√©utilis√©s lorsque tous ont √©t√© affich√©s une fois.
        """
        if not self.msg:
            print(f"{self.name} n'a rien √† dire.")
            return

        # Afficher le message correspondant √† l'index actuel
        print(self.msg[self.msg_index])

        # Incr√©menter l'index, et revenir √† 0 lorsqu'on atteint la fin
        self.msg_index = (self.msg_index + 1) % len(self.msg)